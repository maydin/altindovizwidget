package com.murat.altindoviz.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 1/3/2014 10:43:14 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.kxml2.kdom.Element;
import org.kxml2.kdom.Node;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;

import android.os.AsyncTask;

import com.murat.altindoviz.Kurlar;

public class DataService {

	public String NAMESPACE = "http://data.altinkaynak.com/";
	public String url = "http://data.altinkaynak.com/DataService.asmx";
	public int timeOut = 60000;
	public IWsdl2CodeEvents eventHandler;

	public DataService() {
	}

	public DataService(IWsdl2CodeEvents eventHandler) {
		this.eventHandler = eventHandler;
	}

	public DataService(IWsdl2CodeEvents eventHandler, String url) {
		this.eventHandler = eventHandler;
		this.url = url;
	}

	public DataService(IWsdl2CodeEvents eventHandler, String url,
			int timeOutInSeconds) {
		this.eventHandler = eventHandler;
		this.url = url;
		this.setTimeOut(timeOutInSeconds);
	}

	public void setTimeOut(int seconds) {
		this.timeOut = seconds * 1000;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public void GetCurrencyAsync() throws Exception {
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetCurrencyAsync(null);
	}

	public void GetCurrencyAsync(final List<HeaderProperty> headers)
			throws Exception {

		new AsyncTask<Void, Void, String>() {
			@Override
			protected void onPreExecute() {
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected String doInBackground(Void... params) {
				return GetCurrency(headers);
			}

			@Override
			protected void onPostExecute(String result) {
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null) {
					eventHandler.Wsdl2CodeFinished("GetCurrency", result);
				}
			}
		}.execute();
	}

	public String GetCurrency() {
		return GetCurrency(null);
	}

	public String GetCurrency(List<HeaderProperty> headers) {
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://data.altinkaynak.com/",
				"GetCurrency");

		soapEnvelope.headerOut = new Element[1];
		soapEnvelope.headerOut[0] = buildAuthHeader();

		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try {
			if (headers != null) {
				httpTransport.call("http://data.altinkaynak.com/GetCurrency",
						soapEnvelope, headers);
			} else {
				httpTransport.call("http://data.altinkaynak.com/GetCurrency",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault) {
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else {
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0) {
					Object obj = result.getProperty(0);
					if (obj != null
							&& obj.getClass().equals(SoapPrimitive.class)) {
						SoapPrimitive j = (SoapPrimitive) obj;
						String resultVariable = j.toString();
						return resultVariable;
					} else if (obj != null && obj instanceof String) {
						String resultVariable = (String) obj;
						return resultVariable;
					}
				}
			}
		} catch (Exception e) {
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return "";
	}

	public void GetGoldAsync() throws Exception {
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetGoldAsync(null);
	}

	public void GetGoldAsync(final List<HeaderProperty> headers)
			throws Exception {

		new AsyncTask<Void, Void, String>() {
			@Override
			protected void onPreExecute() {
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected String doInBackground(Void... params) {
				return GetGold(headers);
			}

			@Override
			protected void onPostExecute(String result) {
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null) {
					eventHandler.Wsdl2CodeFinished("GetGold", result);
				}
			}
		}.execute();
	}
	public void GetGoldAndCurrencyAsync() throws Exception {
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetGoldAndCurrencyAsync(null);
	}
	public void GetGoldAndCurrencyAsync(final List<HeaderProperty> headers)
			throws Exception {

		new AsyncTask<Void, Void, Kurlar>() {
			@Override
			protected void onPreExecute() {
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected Kurlar doInBackground(Void... params) {
				
				String goldResult = GetGold(headers);
				String currencyResult = GetCurrency(headers);
				
				Serializer serializer = new Persister();
				Kurlar result = null;
				Kurlar goldSerialized = null;
				Kurlar currencySerialized = null;
				try {
					goldSerialized = serializer.read(Kurlar.class, goldResult);
					currencySerialized = serializer.read(Kurlar.class, currencyResult);
					result = goldSerialized;
					result.addKur(currencySerialized);
					
				}
				catch (Exception e) {
					
					eventHandler.Wsdl2CodeFinishedWithException(e);
				}
				return result;
			}

			@Override
			protected void onPostExecute(Kurlar result) {
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null) {
					eventHandler.Wsdl2CodeFinished("GetGoldAndCurrency", result);
				}
			}
		}.execute();
	}

	public String GetGold() {
		return GetGold(null);
	}

	public String GetGold(List<HeaderProperty> headers) {
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://data.altinkaynak.com/",
				"GetGold");

		soapEnvelope.headerOut = new Element[1];
		soapEnvelope.headerOut[0] = buildAuthHeader();

		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try {
			if (headers != null) {
				httpTransport.call("http://data.altinkaynak.com/GetGold",
						soapEnvelope, headers);
			} else {
				httpTransport.call("http://data.altinkaynak.com/GetGold",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault) {
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else {
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0) {
					Object obj = result.getProperty(0);
					if (obj != null
							&& obj.getClass().equals(SoapPrimitive.class)) {
						SoapPrimitive j = (SoapPrimitive) obj;
						String resultVariable = j.toString();
						return resultVariable;
					} else if (obj != null && obj instanceof String) {
						String resultVariable = (String) obj;
						return resultVariable;
					}
				}
			}
		} catch (Exception e) {
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return "";
	}

	private Element buildAuthHeader() {
		Element h = new Element().createElement(NAMESPACE, "AuthHeader");
		Element username = new Element().createElement(NAMESPACE, "Username");
		username.addChild(Node.TEXT, "AltinkaynakWebServis");
		h.addChild(Node.ELEMENT, username);
		Element pass = new Element().createElement(NAMESPACE, "Password");
		pass.addChild(Node.TEXT, "AltinkaynakWebServis");
		h.addChild(Node.ELEMENT, pass);

		return h;
	}

	public void GetMainAsync() throws Exception {
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetMainAsync(null);
	}

	public void GetMainAsync(final List<HeaderProperty> headers)
			throws Exception {

		new AsyncTask<Void, Void, String>() {
			@Override
			protected void onPreExecute() {
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected String doInBackground(Void... params) {
				return GetMain(headers);
			}

			@Override
			protected void onPostExecute(String result) {
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null) {
					eventHandler.Wsdl2CodeFinished("GetMain", result);
				}
			}
		}.execute();
	}

	public String GetMain() {
		return GetMain(null);
	}

	public String GetMain(List<HeaderProperty> headers) {
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://data.altinkaynak.com/",
				"GetMain");
		soapEnvelope.headerOut = new Element[1];
		soapEnvelope.headerOut[0] = buildAuthHeader();
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try {
			if (headers != null) {
				httpTransport.call("http://data.altinkaynak.com/GetMain",
						soapEnvelope, headers);
			} else {
				httpTransport.call("http://data.altinkaynak.com/GetMain",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault) {
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else {
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0) {
					Object obj = result.getProperty(0);
					if (obj != null
							&& obj.getClass().equals(SoapPrimitive.class)) {
						SoapPrimitive j = (SoapPrimitive) obj;
						String resultVariable = j.toString();
						return resultVariable;
					} else if (obj != null && obj instanceof String) {
						String resultVariable = (String) obj;
						return resultVariable;
					}
				}
			}
		} catch (Exception e) {
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return "";
	}

	public void GetParityAsync() throws Exception {
		if (this.eventHandler == null)
			throw new Exception("Async Methods Requires IWsdl2CodeEvents");
		GetParityAsync(null);
	}

	public void GetParityAsync(final List<HeaderProperty> headers)
			throws Exception {

		new AsyncTask<Void, Void, String>() {
			@Override
			protected void onPreExecute() {
				eventHandler.Wsdl2CodeStartedRequest();
			};

			@Override
			protected String doInBackground(Void... params) {
				return GetParity(headers);
			}

			@Override
			protected void onPostExecute(String result) {
				eventHandler.Wsdl2CodeEndedRequest();
				if (result != null) {
					eventHandler.Wsdl2CodeFinished("GetParity", result);
				}
			}
		}.execute();
	}

	public String GetParity() {
		return GetParity(null);
	}

	public String GetParity(List<HeaderProperty> headers) {
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(
				SoapEnvelope.VER11);
		soapEnvelope.implicitTypes = true;
		soapEnvelope.dotNet = true;
		SoapObject soapReq = new SoapObject("http://data.altinkaynak.com/",
				"GetParity");
		soapEnvelope.setOutputSoapObject(soapReq);
		HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
		try {
			if (headers != null) {
				httpTransport.call("http://data.altinkaynak.com/GetParity",
						soapEnvelope, headers);
			} else {
				httpTransport.call("http://data.altinkaynak.com/GetParity",
						soapEnvelope);
			}
			Object retObj = soapEnvelope.bodyIn;
			if (retObj instanceof SoapFault) {
				SoapFault fault = (SoapFault) retObj;
				Exception ex = new Exception(fault.faultstring);
				if (eventHandler != null)
					eventHandler.Wsdl2CodeFinishedWithException(ex);
			} else {
				SoapObject result = (SoapObject) retObj;
				if (result.getPropertyCount() > 0) {
					Object obj = result.getProperty(0);
					if (obj != null
							&& obj.getClass().equals(SoapPrimitive.class)) {
						SoapPrimitive j = (SoapPrimitive) obj;
						String resultVariable = j.toString();
						return resultVariable;
					} else if (obj != null && obj instanceof String) {
						String resultVariable = (String) obj;
						return resultVariable;
					}
				}
			}
		} catch (Exception e) {
			if (eventHandler != null)
				eventHandler.Wsdl2CodeFinishedWithException(e);
			e.printStackTrace();
		}
		return "";
	}

}
